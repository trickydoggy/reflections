Como a visuzalização de um diff entre duas versões de um arquivo ajuda você a ver o bug que foi introduzido?

Como ter fácil acesso a todo o histórico de um arquivo pode torná-lo um programador mais eficiente no longo prazo?

Na sua opinião, quais são os prós e contras de escolher manualmente quando criar um commit, como ocorre no Git, v. o salvamento automático de versões, como no Google Docs?

Por que você acha que alguns sistemas de controle de versão, como o Git, permitem salvar vários arquivos em um commit, enquanto outros, como o Google Docs, tratam cada arquivo separadamente?

Como usar os comandos git log e git diff para visualizar o histórico dos arquivos?

Agora que você já configurou a sua área de trabalho, você quer usar o Git para quê?

Como você pode usar a área de preparação para garantir que tenha um commit por alteração lógica?

Quais são algumas das situações em que branches seriam úteis para manter seu histórico organizado? Como branches ajudariam?

Como os diagramas ajudam a visualizar a estrutura de branches?

Qual é o resultado da mesclagem de dois branches? Por que o representamos no diagrama dessa forma?

Quais são os prós e contras da mesclagem automática do Git v. sempre fazer mesclagens manualmente?

Por que você prefere efetuar pull de alterações manualmente do que deixar o Git atualizar-se automaticamente com o seu repositório remoto?

Descreva as diferenças entre bifurcações, clones e branches. Quando você usaria um e não os outros?

Qual é o benefício de ter uma cópia do último estado conhecido do remoto armazenado localmente?

Como você colaboraria sem usar Git ou GitHub? O que seria mais fácil e mais difícil?

Quando você gostaria de fazer alterações em um branch separado, e não diretamente no master? Quais são os benefícios de cada abordagem?

